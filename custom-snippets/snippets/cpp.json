{
	"union_find": {
		"prefix": "union_find",
		"body": [
			"struct union_find {",
			"\tvi p, rank, set_size;",
			"\tint num_sets;",
			"\tunion_find(int n) : p(n), rank(n), set_size(n, 1), num_sets(n) {",
			"\t\tiota(p.begin(), p.end(), 0);",
			"\t}",
			"\tint find(int i) { return (p[i] == i) ? i : (p[i] = find(p[i])); }",
			"\tvoid connect(int i, int j) {",
			"\t\tif (find(i) == find(j)) return; ",
			"\t\tint x = find(i), y = find(j);",
			"\t\tif (rank[x] > rank[y]) swap(x, y); ",
			"\t\tp[x] = y;",
			"\t\tif (rank[x] == rank[y]) ++rank[y];",
			"\t\tset_size[y] += set_size[x];",
			"\t\tnum_sets--;",
			"\t}",
			"};"
		],
		"description": ""
	},
	"segment_tree": {
		"prefix": "segment_tree",
		"body": [
			"struct segment_tree {};"
		],
		"description": "Dynamic range min / max updates and queries in O(logN)"
	},
	"binary_search": {
		"prefix": "binary_search",
		"body": [
			"struct binary_search {};"
		],
		"description": ""
	},
  "fenwick_tree": {
    "prefix": "fenwick_tree",
    "body": [
    ],
    "description": "Dynamic range sum updates and queries in O(logN)"
  },
  "treap": {
    "prefix": "treap", 
    "body": [],
    "description": ""
  },
}
